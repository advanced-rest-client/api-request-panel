/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   api-request-panel.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/elements/dom-if.d.ts" />
/// <reference path="../api-request-editor/api-request-editor.d.ts" />
/// <reference path="../response-view/response-view.d.ts" />
/// <reference path="../raml-aware/raml-aware.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../iron-scroll-target-behavior/iron-scroll-target-behavior.d.ts" />
/// <reference path="../headers-parser-behavior/headers-parser-behavior.d.ts" />
/// <reference path="../events-target-behavior/events-target-behavior.d.ts" />

declare namespace ApiElements {

  /**
   * `api-request-panel`
   * An complete request editor and response view panels in single element
   *
   * This element is to replace `api-console-request` element from `mulesoft/api-console`
   * project repository.
   *
   * This is also a base case for any application that renders request and
   * response views.
   *
   * It combines `api-request-editor` and `response-view` elements and
   * reacts on `api-request` and `api-response` events.
   * It also adds additional configuration options that exists in API console
   * (proxy, additional headers).
   *
   * ## `api-request` and `api-response` events
   *
   * See full documentation here: https://github.com/advanced-rest-client/api-components-api/blob/master/docs/api-request-and-response.md
   *
   * ## Dependencies
   *
   * - This components does not include any polyfills
   * - This component nor it's children does not contain trasnsport library.
   * Any transport library that handles ARC request event can work with this
   * component. See `advanced-rest-client/xhr-simple-request` for implementation
   * details
   * - From authorization panel changes:
   *  - `auth-settings-changed` custom event is stopped from bubbling. Listen for `authorization-settings-changed` event instead.
   * - From auth-method-oauth2 changes:
   *  - Added `deliveryMethod` and `deliveryName` properties to the `detail.setting` object.
   * - From auth-method-oauth1 changes:
   *  - Crypto library is no longer included into the element. Use `advanced-rest-client/cryptojs-lib` component to include the library if your project doesn't use crypto libraries already.
   *
   * ## Narrow view
   *
   * Generally the API components are flexible and mobile friendly. However,
   * it is possible to set `narrow` property to render form elements in
   * a mobile fieldly view. In most cases it means that forms controls are
   * rendered in different layout.
   *
   * ## api-navigation integration
   *
   * The element works with `api-navigation` element. Set `handle-navigation-events`
   * attribute when using `api-navigation` so the component will automatically
   * update selection when internal API navigation occurres.
   */
  class ApiRequestPanel extends
    ArcBehaviors.HeadersParserBehavior(
    Polymer.IronScrollTargetBehavior(
    ArcBehaviors.EventsTargetBehavior(
    Polymer.Element))) {

    /**
     * `raml-aware` scope property to use.
     */
    aware: string|null|undefined;

    /**
     * AMF HTTP method (operation in AMF vocabulary) ID.
     */
    selected: string|null|undefined;

    /**
     * By default application hosting the element must set `selected`
     * property. When using `api-navigation` element
     * by setting this property the element listens for navigation events
     * and updates the state
     */
    handleNavigationEvents: boolean|null|undefined;

    /**
     * A model's `@id` of selected documentation part.
     * Special case is for `summary` view. It's not part of an API
     * but most applications has some kind of summary view for the
     * API.
     */
    amfModel: object|null|undefined;

    /**
     * Hides the URL editor from the view.
     * The editor is still in the DOM and the `urlInvalid` property still will be set.
     */
    noUrlEditor: boolean|null|undefined;

    /**
     * A base URI for the API. To be set if RAML spec is missing `baseUri`
     * declaration and this produces invalid URL input. This information
     * is passed to the URL editor that prefixes the URL with `baseUri` value
     * if passed URL is a relative URL.
     */
    baseUri: string|null|undefined;

    /**
     * OAuth2 redirect URI.
     * This value **must** be set in order for OAuth 1/2 to work properly.
     */
    redirectUri: string|null|undefined;

    /**
     * If set it will renders the view in the narrow layout.
     */
    narrow: boolean|null|undefined;

    /**
     * A request object that is generated from request edtor properties.
     * It contains the following properties:
     * - url
     * - method
     * - headers
     * - payload
     * - queryModel
     * - pathModel
     */
    editorRequest: object|null|undefined;

    /**
     * Created by the transport ARFC `request` object
     */
    request: object|null|undefined;

    /**
     * Created by the transport ARC `response` object.
     */
    response: object|null|undefined;

    /**
     * Computed value, true, when the response object is set.
     */
    readonly hasResponse: boolean|null|undefined;

    /**
     * A flag indincating request error.
     */
    isErrorResponse: boolean|null|undefined;

    /**
     * True if the response is made by the Fetch / XHR api.
     */
    responseIsXhr: boolean|null|undefined;

    /**
     * An error object associated with the response when error.
     */
    responseError: object|null|undefined;

    /**
     * Response full loading time. This information is received from the
     * transport library.
     */
    loadingTime: number|null|undefined;

    /**
     * If the transport method is able to collect detailed information about request timings
     * then this value will be set. It's the `timings` property from the HAR 1.2 spec.
     */
    timing: object|null|undefined;

    /**
     * If the transport method is able to collect detailed information about redirects timings
     * then this value will be set. It's a list of `timings` property from the HAR 1.2 spec.
     */
    redirectsTiming: any[]|null|undefined;

    /**
     * It will be set if the transport method can generate information about redirections.
     */
    redirects: any[]|null|undefined;

    /**
     * Http message sent to the server.
     *
     * This information should be available only in case of advanced HTTP transport.
     */
    sourceMessage: string|null|undefined;

    /**
     * Main scroll target for the app.
     */
    scrollTarget: HTMLElement|null|undefined;

    /**
     * Forces the console to send headers defined in this string overriding any used defined
     * header.
     * This should be an array of headers with `name` and `value` keys, e.g.:
     * ```
     * [{
     *   name: "x-token",
     *   value: "value"
     * }]
     * ```
     */
    appendHeaders: any[]|null|undefined;

    /**
     * If set every request made from the console will be proxied by the service provided in this
     * value.
     * It will prefix entered URL with the proxy value. so the call to
     * `http://domain.com/path/?query=some+value` will become
     * `https://proxy.com/path/http://domain.com/path/?query=some+value`
     *
     * If the proxy require a to pass the URL as a query parameter define value as follows:
     * `https://proxy.com/path/?url=`. In this case be sure to set `proxy-encode-url`
     * attribute.
     */
    proxy: string|null|undefined;

    /**
     * If `proxy` is set, it will URL encode the request URL before appending it to the proxy URL.
     * `http://domain.com/path/?query=some+value` will become
     * `https://proxy.com/?url=http%3A%2F%2Fdomain.com%2Fpath%2F%3Fquery%3Dsome%2Bvalue`
     */
    proxyEncodeUrl: boolean|null|undefined;

    /**
     * Location of the `bower_components` folder.
     * It should be a path from server's root path including bower_components.
     */
    bowerLocation: string|null|undefined;

    /**
     * ID of latest request.
     * It is received from the `api-request-editor` when `api-request`
     * event is dispatched. When `api-response` event is handled
     * the id is compared and if match it dispays the result.
     *
     * This system allows to use different request panels on single app
     * and don't mix the results.
     */
    lastRequestId: String|Number|null;
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;
    ready(): void;

    /**
     * Registers `api-navigation-selection-changed` event listener handler
     * on window object.
     */
    _registerNavigationEvents(): void;

    /**
     * Removes event listener from window object for
     * `api-navigation-selection-changed` event.
     */
    _unregisterNavigationEvents(): void;

    /**
     * Registers / unregisters event listeners depending on `state`
     */
    _handleNavChanged(state: Boolean|null): void;

    /**
     * Handler for `api-navigation-selection-changed` event.
     */
    _navigationHandler(e: CustomEvent|null): void;

    /**
     * Sets OAuth 2 redirect URL for the authorization panel
     *
     * @param location Bower components location
     */
    _updateRedirectUri(location: String|null): void;

    /**
     * Computes if there is a reponse object.
     *
     * @param response ARC response objects
     */
    _computeHasResponse(response: object|null): Boolean|null;

    /**
     * A handler for the API call.
     * This handler will only check if there is authorization required
     * and if the user is authorizaed.
     *
     * @param e `api-request` event
     */
    _apiRequestHandler(e: CustomEvent|null): void;

    /**
     * Appends headers defined in the `appendHeaders` array.
     *
     * @param e The `api-request` event.
     */
    _appendConsoleHeaders(e: CustomEvent|null): void;

    /**
     * Sets the proxy URL if the `proxy` property is set.
     */
    _appendProxy(e: any): void;

    /**
     * Handler for the `api-response` custom event. Sets values on the response
     * panel when response is ready.
     */
    _apiResponseHandler(e: CustomEvent|null): void;

    /**
     * Propagate `api-response` detail object.
     *
     * @param data Event's detail object
     */
    _propagateResponse(data: object|null): void;

    /**
     * Clears response panel when selected id changed.
     */
    _selectedChanged(id: String|null): void;

    /**
     * Clears response panel.
     */
    clearResponse(): void;

    /**
     * Dispatches `api-request-data-changed` custom event when any of the
     * request data changes.
     */
    _editorRequestChanged(record: object|null): void;
  }
}

interface HTMLElementTagNameMap {
  "api-request-panel": ApiElements.ApiRequestPanel;
}
